
/**
 * 代码覆盖率配置脚本
 */
println('gradle jacoco , init start')
if (!isNeedUseJacoco()) {
    println('gradle jacoco , not need jacoco')
    return
}
println('gradle jacoco isNeedUseJacoco = ture')
//依赖插件
apply plugin: 'com.github.jacoco'

jacocoCoverage {
    //配置ec 文件路径，可以通过模式匹配的方式
    jacocoExecFiles = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/*.ec', "**.ec"])
    // 过滤自动生成的类
    excludeClasses = ['**/**_TypeAdapter.*']
    reports {
        html = true
    }
    //git diff 信息
    diffSource {
        //todo 需要替换
        oldCommit = 'e59937b6'
        //todo 需要替换
        newCommit = 'a191cc24'
    }
}

android {
    defaultConfig {
        buildTypes {
            debug {
                // 打开代码覆盖度开关
                testCoverageEnabled true
                println 'gradle jacoco debug testCoverageEnabled =====>'
            }
            release {
                println 'gradle jacoco release testCoverageEnabled =====>'
            }
        }
    }
}

dependencies {
    // 代码覆盖度
    implementation('com.github.jacoco:runtime:0.0.23-SNAPSHOT')
}

//过滤，只在debug下使用
def isNeedUseJacoco() {
    Map<String, String> map = System.getenv()
    if (map == null) {
        return false
    }
    //拿到编译后的 BUILD_TYPE 和 CONFIG。具体看 BuildConfig 生成类的代码
    boolean hasBuildType = map.containsKey("BUILD_TYPE")
    boolean hasConfig = map.containsKey("CONFIG")
    println 'gradle jacoco isNeedUseJacoco hasBuildType =====>' + hasBuildType + ',hasConfig = ' + hasConfig
    String buildType = "debug"
    String config = "debug"
    if (hasBuildType) {
        buildType = map.get("BUILD_TYPE")
    }
    if (hasConfig) {
        config = map.get("CONFIG")
    }
    println 'gradle jacoco isNeedJacoco buildType  =====>' + buildType + ',config = ' + config
    if (buildType.toLowerCase() == "debug" && config.toLowerCase() == "debug" && isNotUserJacoco()) {
        println('gradle jacoco debug use jacoco')
        return true
    }
    println('gradle jacoco not use jacoco')
    //如果是正式包，则不使用代码覆盖度
    return false
}

static def isNotUserJacoco() {
    //在debug下默认使用代码覆盖度，如果你在debug下不想使用代码覆盖度，则设置成false
    return true
}
