//控制组件模式和集成模式
if (rootProject.ext.isAndroidApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply from: rootProject.projectDir.absolutePath + "/yc.gradle"

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        multiDexEnabled true
        if (rootProject.ext.isAndroidApplication){
            //组件模式下设置applicationId
            applicationId "com.ycbjie.android"
        }
        //如果是集成模式下，则设置ARouter的配置，用于组件间通信的实现
        /*javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }*/
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //jdk1.8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            if (rootProject.ext.isAndroidApplication) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(rootProject.ext.dependencies["appcompat"])
    implementation(rootProject.ext.dependencies["annotation"])
    implementation(rootProject.ext.dependencies["material"])
    implementation(rootProject.ext.dependencies["swiperefreshlayout"])
    implementation(rootProject.ext.dependencies["constraintlayout"])
    implementation(rootProject.ext.dependencies["coordinatorlayout"])
    implementation(rootProject.ext.dependencies["lifecycle"])
    implementation(rootProject.ext.dependencies["lifecycleRuntime"])
    implementation(rootProject.ext.dependencies["gson"])
    implementation project(path: ':LibraryLayer')
    implementation project(path: ':ToolUtilsLib')
    implementation project(path: ':HttpServer')
    implementation project(path: ':ConfigLayer')
    implementation project(path: ':ImageServer')
    implementation project(path: ':CustomWidget')
    
    implementation(rootProject.ext.dependencies["kotlinxJdk"])
    // Kotlin coroutines
    implementation(rootProject.ext.dependencies["kotlinxCoroutinesCore"])
    implementation(rootProject.ext.dependencies["kotlinxCoroutinesAndroid"])
    implementation project(path: ':AppStateLib')


}
